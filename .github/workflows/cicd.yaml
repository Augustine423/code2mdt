```yaml
name: Deploy to EC2 with Rollback and Restore

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy, leave blank for default deploy)'
        required: false
        default: 'deploy'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    steps:
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Configure SSH Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Build and Deploy on EC2
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            set -e  # Exit on error

            # Install required packages
            sudo apt-get update -y
            sudo apt-get install -y git python3-pip python3-venv docker.io unzip docker-compose-v2

            # Configure Docker
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker --now

            # Install AWS CLI if not present
            if ! command -v aws >/dev/null 2>&1; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi

            # Configure AWS CLI
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set default.region "${{ secrets.AWS_REGION }}"

            # Install gdown in a virtual environment
            if ! command -v gdown >/dev/null 2>&1; then
              python3 -m venv /home/ubuntu/gdown-venv
              . /home/ubuntu/gdown-venv/bin/activate
              pip install gdown
            fi
            . /home/ubuntu/gdown-venv/bin/activate

            # Backup current code
            BACKUP_DIR="/tmp/code2mdt-backups"
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            mkdir -p "$BACKUP_DIR"
            if [ -d "/home/ubuntu/code2mdt" ]; then
              tar -czf "$BACKUP_DIR/$TIMESTAMP.tar.gz" -C /home/ubuntu code2mdt
            fi
            # Keep only the last 3 backups
            ls -t "$BACKUP_DIR" | tail -n +4 | xargs -I {} rm -f "$BACKUP_DIR/{}"

            # Clone or update repository
            REPO_DIR="/home/ubuntu/code2mdt"
            if [ -d "$REPO_DIR" ]; then
              cd "$REPO_DIR"
              git fetch origin
              git reset --hard origin/main
            else
              git clone https://github.com/Augustine423/code2mdt.git "$REPO_DIR"
              cd "$REPO_DIR"
            fi

            # Manage Frontend .env
            if [ -f "Frontend/.env" ]; then
              mv Frontend/.env Frontend/.env.backup
            fi
            gdown "1F8MUCGpTqjOWvoEUkmBr79m_uuS-usVq" -O Frontend/.env
            [ -f "Frontend/.env" ] || { echo "Failed to download Frontend .env"; exit 1; }
            chmod 600 Frontend/.env
            find /home/ubuntu/code2mdt/Frontend -name "*.env.backup" -mtime +7 -delete

            # Manage Backend .env
            if [ -f "Backend/src/main/resources/.env" ]; then
              mv Backend/src/main/resources/.env Backend/src/main/resources/.env.backup
            fi
            gdown "1mIrLok-BLhRtcW2JIxK5FyXpGl7gCawu" -O Backend/src/main/resources/.env
            [ -f "Backend/src/main/resources/.env" ] || { echo "Failed to download Backend .env"; exit 1; }
            chmod 600 Backend/src/main/resources/.env
            find /home/ubuntu/code2mdt/Backend/src/main/resources -name "*.env.backup" -mtime +7 -delete

            # Deactivate virtual environment
            deactivate

            # Create logs directory
            mkdir -p Backend/logs

            # Set permissions for upload-logs-to-s3.sh if it exists
            [ -f upload-logs-to-s3.sh ] && chmod 700 upload-logs-to-s3.sh

            # Verify docker-compose.yaml
            [ -f docker-compose.yaml ] || { echo "docker-compose.yaml not found"; exit 1; }

            # Build and deploy
            docker compose down  # Stop existing containers
            docker compose build  # Use caching for faster builds
            docker compose up -d  # Deploy in detached mode

            # Prune unused Docker objects
            docker system prune -a -f
          EOF
          rm -f private_key.pem

  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    steps:
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Configure SSH Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Rollback to Previous Version
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            set -e  # Exit on error

            BACKUP_DIR="/tmp/code2mdt-backups"
            REPO_DIR="/home/ubuntu/code2mdt"

            # Find the most recent backup
            LATEST_BACKUP=$(ls -t "$BACKUP_DIR" | head -n 1)
            if [ -z "$LATEST_BACKUP" ]; then
              echo "No backups found in $BACKUP_DIR"
              exit 1
            fi

            # Stop running containers
            cd "$REPO_DIR"
            docker compose down

            # Restore the backup
            rm -rf "$REPO_DIR"
            mkdir -p "$REPO_DIR"
            tar -xzf "$BACKUP_DIR/$LATEST_BACKUP" -C /home/ubuntu

            # Ensure .env files and logs directory
            if [ -f "Frontend/.env" ]; then
              chmod 600 Frontend/.env
            fi
            if [ -f "Backend/src/main/resources/.env" ]; then
              chmod 600 Backend/src/main/resources/.env
            fi
            mkdir -p Backend/logs
            [ -f upload-logs-to-s3.sh ] && chmod 700 upload-logs-to-s3.sh

            # Verify docker-compose.yaml
            [ -f docker-compose.yaml ] || { echo "docker-compose.yaml not found"; exit 1; }

            # Rebuild and redeploy
            docker compose build
            docker compose up -d

            # Prune unused Docker objects
            docker system prune -a -f
          EOF
          rm -f private_key.pem

  restore:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'restore'
    steps:
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Configure SSH Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Restore Specific Version
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            set -e  # Exit on error

            BACKUP_DIR="/tmp/code2mdt-backups"
            REPO_DIR="/home/ubuntu/code2mdt"
            TIMESTAMP="${{ github.event.inputs.timestamp }}"

            # List available backups if no timestamp provided
            if [ -z "$TIMESTAMP" ]; then
              echo "Available backups:"
              ls -l "$BACKUP_DIR"
              exit 1
            fi

            # Check if the backup exists
            if [ ! -f "$BACKUP_DIR/$TIMESTAMP.tar.gz" ]; then
              echo "Backup $TIMESTAMP.tar.gz not found in $BACKUP_DIR"
              exit 1
            fi

            # Stop running containers
            cd "$REPO_DIR"
            docker compose down

            # Restore the backup
            rm -rf "$REPO_DIR"
            mkdir -p "$REPO_DIR"
            tar -xzf "$BACKUP_DIR/$TIMESTAMP.tar.gz" -C /home/ubuntu

            # Ensure .env files and logs directory
            if [ -f "Frontend/.env" ]; then
              chmod 600 Frontend/.env
            fi
            if [ -f "Backend/src/main/resources/.env" ]; then
              chmod 600 Backend/src/main/resources/.env
            fi
            mkdir -p Backend/logs
            [ -f upload-logs-to-s3.sh ] && chmod 700 upload-logs-to-s3.sh

            # Verify docker-compose.yaml
            [ -f docker-compose.yaml ] || { echo "docker-compose.yaml not found"; exit 1; }

            # Rebuild and redeploy
            docker compose build
            docker compose up -d

            # Prune unused Docker objects
            docker system prune -a -f
          EOF
          rm -f private_key.pem
