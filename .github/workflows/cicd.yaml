name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          echo -e "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_INSTANCE_IP << 'EOF'
            echo "Connected to EC2 for Build"

            # Install Git
            if ! command -v git >/dev/null 2>&1; then
              echo "Installing Git..."
              sudo apt-get update -y
              sudo apt-get install -y git
            fi

            # Install unzip (for AWS CLI)
            if ! command -v unzip >/dev/null 2>&1; then
              echo "Installing unzip..."
              sudo apt-get install -y unzip
            fi

            # Install AWS CLI
            if ! command -v aws >/dev/null 2>&1; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi

            # Configure AWS CLI
            echo "Configuring AWS CLI..."
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set default.region "${{ secrets.AWS_REGION }}"
            aws configure set output "json"

            # Install Docker
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # Install Docker Compose
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Install wget for downloading .env file
            if ! command -v wget >/dev/null 2>&1; then
              echo "Installing wget..."
              sudo apt-get install -y wget
            fi

            # Clone or update the repo
            REPO_DIR="/home/ubuntu/code2mdt"
            if [ -d "$REPO_DIR" ]; then
              echo "Updating existing repo..."
              cd "$REPO_DIR"
              git pull origin main || { echo "Git pull failed"; exit 1; }
            else
              echo "Cloning repo..."
              git clone https://github.com/Augustine423/code2mdt.git "$REPO_DIR" || { echo "Git clone failed"; exit 1; }
              cd "$REPO_DIR"
            fi

            # Download .env file from Google Drive
            echo "Downloading .env file from Google Drive..."
            FILE_ID="1XP9W7uCltzU8IC61I7nA9HDKRdom_Q7u"
            wget --no-check-certificate "https://drive.google.com/uc?export=download&id=$FILE_ID" -O Frontend/.env
            if [ ! -f "Frontend/.env" ]; then
              echo "Error: Failed to download Frontend/.env"
              exit 1
            fi
            chmod 600 Frontend/.env
            echo "Frontend/.env downloaded and permissions set"

            # Create logs directory for backend
            mkdir -p Backend/logs
            echo "Logs directory created"

            # Verify docker-compose.yaml exists
            if [ ! -f "docker-compose.yaml" ]; then
              echo "Error: docker-compose.yaml not found in $REPO_DIR"
              exit 1
            fi

            # Build and tag images with version (no cache for fresh builds)
            COMMIT_SHA=$(git rev-parse --short HEAD) || { echo "Failed to get commit SHA"; exit 1; }
            echo "Building services with tag: ${COMMIT_SHA}"
            timeout 20m docker-compose build --no-cache --progress=plain || { echo "Build timed out or failed"; exit 1; }
            docker tag code2mdt-frontend:latest frontend:${COMMIT_SHA}
            docker tag code2mdt-backend:latest backend:${COMMIT_SHA}
            docker tag code2mdt-backend1:latest backend1:${COMMIT_SHA}
          EOF
          rm -f private_key.pem

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          echo -e "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_INSTANCE_IP << 'EOF'
            echo "Connected to EC2 for Deploy"

            # Navigate to project directory
            cd /home/ubuntu/code2mdt

            # Stop any running containers
            echo "Stopping running containers..."
            docker-compose down || { echo "Failed to stop containers"; exit 1; }

            # Get current commit SHA
            COMMIT_SHA=$(git rev-parse --short HEAD) || { echo "Failed to get commit SHA"; exit 1; }
            echo "Current commit SHA: ${COMMIT_SHA}"

            # Deploy the new version
            echo "Deploying with latest tags..."
            docker-compose up -d || { echo "Failed to deploy containers"; exit 1; }

            # Prune all unused Docker objects after successful deployment
            echo "Pruning all unused Docker objects..."
            docker system prune -a -f || { echo "Failed to prune Docker system"; exit 1; }

            # Show running containers
            echo "Running containers:"
            docker ps -a

            # Show remaining images for verification
            echo "Remaining Docker images:"
            docker images
          EOF
          rm -f private_key.pem
