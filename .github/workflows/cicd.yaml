name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\$/$$  /g' > private_key.pem
          chmod 600 private_key.pem

      - name: Build on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            set -x  # Enable debug mode for tracing
            echo "Connected to EC2 for Build"

            # Install Git
            if ! command -v git >/dev/null 2>&1; then
              echo "Installing Git..."
              sudo apt-get update -y
              sudo apt-get install -y git
            fi

            # Install unzip (for AWS CLI)
            if ! command -v unzip >/dev/null 2>&1; then
              echo "Installing unzip..."
              sudo apt-get install -y unzip
            fi

            # Install AWS CLI
            if ! command -v aws >/dev/null 2>&1; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi

            # Configure AWS CLI
            echo "Configuring AWS CLI..."
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set default.region "${{ secrets.AWS_REGION }}"
            aws configure set output "json"

            # Install Docker
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # Install Docker Compose
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Install wget for fallback or other uses
            if ! command -v wget >/dev/null 2>&1; then
              echo "Installing wget..."
              sudo apt-get install -y wget
            fi

            # Install gdown
            if ! command -v gdown >/dev/null 2>&1; then
              echo "Installing gdown..."
              sudo apt-get update -y
              # Try installing python3-gdown via apt if available
              if sudo apt-get install -y python3-gdown; then
                echo "python3-gdown installed via apt"
              else
                echo "python3-gdown not available in apt, installing via pip in virtual environment..."
                # Install python3-venv for virtual environment support
                sudo apt-get install -y python3-venv
                # Create and activate virtual environment
                python3 -m venv /home/ubuntu/gdown-venv
                source /home/ubuntu/gdown-venv/bin/activate
                # Install gdown in virtual environment
                pip install gdown || { echo "Failed to install gdown via pip"; exit 1; }
                # Verify gdown installation
                if ! command -v gdown >/dev/null 2>&1; then
                  echo "Error: gdown not found after installation"
                  exit 1
                fi
              fi
            fi

            # Activate virtual environment if gdown was installed via pip
            if [ -d "/home/ubuntu/gdown-venv" ]; then
              source /home/ubuntu/gdown-venv/bin/activate
            fi

            # Clone or update the repo
            REPO_DIR="/home/ubuntu/code2mdt"
            if [ -d "$REPO_DIR" ]; then
              echo "Updating existing repo..."
              cd "$REPO_DIR"
              git fetch origin
              git reset --hard origin/main || { echo "Git reset failed"; exit 1; }
            else
              echo "Cloning repo..."
              git clone https://github.com/Augustine423/code2mdt.git "$REPO_DIR" || { echo "Git clone failed"; exit 1; }
              cd "$REPO_DIR"
            fi

            # Backup existing Frontend .env file
            if [ -f "Frontend/.env" ]; then
              echo "Backing up existing Frontend/.env..."
              mv Frontend/.env Frontend/.env.backup
            fi

            # Download .env file for Frontend
            echo "Downloading .env file for Frontend from Google Drive..."
            FILE_ID_FRONTEND="1F8MUCGpTqjOWvoEUkmBr79m_uuS-usVq"
            gdown "$FILE_ID_FRONTEND" -O Frontend/.env
            if [ ! -f "Frontend/.env" ]; then
              echo "Error: Failed to download Frontend/.env"
              exit 1
            fi
            chmod 600 Frontend/.env
            echo "Frontend/.env downloaded and permissions set"

            # Clean up old Frontend .env backups (older than 7 days)
            echo "Cleaning up old Frontend .env backups..."
            find /home/ubuntu/code2mdt/Frontend -name "*.env.backup" -mtime +7 -delete

            # Backup existing Backend .env file
            if [ -f "Backend/src/main/resources/.env" ]; then
              echo "Backing up existing Backend/.env..."
              mv Backend/src/main/resources/.env Backend/src/main/resources/.env.backup
            fi

            # Download .env file for Backend
            echo "Downloading .env file for Backend from Google Drive..."
            FILE_ID_BACKEND="1mIrLok-BLhRtcW2JIxK5FyXpGl7gCawu"
            gdown "$FILE_ID_BACKEND" -O Backend/src/main/resources/.env
            if [ ! -f "Backend/src/main/resources/.env" ]; then
              echo "Error: Failed to download Backend/src/main/resources/.env"
              exit 1
            fi
            chmod 600 Backend/src/main/resources/.env
            echo "Backend/src/main/resources/.env downloaded and permissions set"

            # Clean up old Backend .env backups (older than 7 days)
            echo "Cleaning up old Backend .env backups..."
            find /home/ubuntu/code2mdt/Backend/src/main/resources -name "*.env.backup" -mtime +7 -delete

            # Deactivate virtual environment if activated
            if [ -d "/home/ubuntu/gdown-venv" ]; then
              deactivate
            fi

            # Create logs directory for backend
            mkdir -p Backend/logs
            echo "Logs directory created"

            # Permission set to upload-logs-to-s3.sh
            chmod 700 upload-logs-to-s3.sh
            echo "upload-logs-to-s3.sh permissions set"

            # Verify docker-compose.yaml exists
            if [ ! -f "docker-compose.yaml" ]; then
              echo "Error: docker-compose.yaml not found in $REPO_DIR"
              exit 1
            fi

            # Build and tag images with version
            COMMIT_SHA=$(git rev-parse --short HEAD) || { echo "Failed to get commit SHA"; exit 1; }
            echo "Building services with tag: $COMMIT_SHA"
            timeout 30m docker-compose build --no-cache > build.log 2>&1 || { echo "Build timed out or failed"; cat build.log; exit 1; }
            docker tag code2mdt-frontend:latest frontend:"$COMMIT_SHA"
            docker tag code2mdt-backend:latest backend:"$COMMIT_SHA"
            docker tag code2mdt-backend1:latest backend1:"$COMMIT_SHA"
          EOF
          rm -f private_key.pem

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\$/  $$/g' > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Connected to EC2 for Deploy"

            # Navigate to project directory
            cd /home/ubuntu/code2mdt

            # Stop any running containers
            echo "Stopping running containers..."
            docker-compose down || { echo "Failed to stop containers"; exit 1; }

            # Get current commit SHA
            COMMIT_SHA=$(git rev-parse --short HEAD) || { echo "Failed to get commit SHA"; exit 1; }
            echo "Current commit SHA: $COMMIT_SHA"

            # Deploy the new version
            echo "Deploying with latest tags..."
            docker-compose up -d || { echo "Failed to deploy containers"; exit 1; }

            # Prune all unused Docker objects after successful deployment
            echo "Pruning all unused Docker objects..."
            docker system prune -a -f || { echo "Failed to prune Docker system"; exit 1; }

            # Show running containers
            echo "Running containers:"
            docker ps -a

            # Show remaining images for verification
            echo "Remaining Docker images:"
            docker images
          EOF
          rm -f private_key.pem
