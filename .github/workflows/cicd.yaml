name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Build on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose wget

            # Navigate to project directory
            cd /home/ubuntu/code2mdt || mkdir -p /home/ubuntu/code2mdt && cd /home/ubuntu/code2mdt

            # Pull the latest code
            git pull origin main || git clone https://github.com/${{ github.repository }} .

            # Download Backend .env from Google Drive
            echo "Downloading .env file for Backend from Google Drive..."
            FILE_ID_BACKEND="1mIrLok-BLhRtcW2JIxK5FyXpGl7gCawu"  # Existing Backend FILE_ID
            wget --no-check-certificate "https://drive.google.com/uc?export=download&id=$FILE_ID_BACKEND" -O Backend/.env
            if [ ! -f "Backend/.env" ]; then
              echo "Error: Failed to download Backend/.env"
              exit 1
            fi
            chmod 600 Backend/.env
            echo "Backend/.env downloaded and permissions set"

            # Download Frontend .env from Google Drive
            echo "Downloading .env file for Frontend from Google Drive..."
            FILE_ID_FRONTEND="REPLACE_WITH_FRONTEND_FILE_ID"  # Replace with actual Frontend FILE_ID
            wget --no-check-certificate "https://drive.google.com/uc?export=download&id=$FILE_ID_FRONTEND" -O Frontend/.env
            if [ ! -f "Frontend/.env" ]; then
              echo "Error: Failed to download Frontend/.env"
              exit 1
            fi
            chmod 600 Frontend/.env
            echo "Frontend/.env downloaded and permissions set"

            # Build Docker images
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "Building services with tag: ${COMMIT_SHA}"
            sudo docker-compose build --no-cache

            # Save images
            sudo docker save -o code2mdt-backend.tar code2mdt-backend:latest
            sudo docker save -o code2mdt-backend1.tar code2mdt-backend1:latest
            sudo docker save -o code2mdt-frontend.tar code2mdt-frontend:latest
          EOF

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            cd /home/ubuntu/code2mdt

            # Load images
            sudo docker load -i code2mdt-backend.tar
            sudo docker load -i code2mdt-backend1.tar
            sudo docker load -i code2mdt-frontend.tar

            # Deploy with Docker Compose
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "Deploying services with tag: ${COMMIT_SHA}"
            sudo docker-compose up -d

            # Clean up
            sudo docker system prune -a -f
          EOF
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}